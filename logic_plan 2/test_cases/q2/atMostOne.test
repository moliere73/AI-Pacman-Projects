class: "LogicTest"
success: "PASS"
failure: "NO PASS"

# Python statements initializing variables for the test below.
preamble: """
import logic

A = logic.PropSymbolExpr('A');
B = logic.PropSymbolExpr('B');
C = logic.PropSymbolExpr('C');
D = logic.PropSymbolExpr('D');
symbols = [A, B, C, D]

atmost1 = logicPlan.atMostOne(symbols)

model1 = {A:False, B:False, C:False, D:False}
model2 = {A:False, B:True, C:False, D:False}
model3 = {A:False, B:True, C:False, D:True}
model4 = {A:False, B:False, C:False, D:True}
model5 = {A:False, B:False, C:True, D:False}
model6 = {A:False, B:False, C:True, D:True}
model7 = {A:True, B:True, C:True, D:False}
model8 = {A:True, B:False, C:True, D:False}

ans1 = logic.pl_true(atmost1,model1)
ans2 = logic.pl_true(atmost1,model2)
ans3 = logic.pl_true(atmost1,model3)
ans4 = logic.pl_true(atmost1,model4)
ans5 = logic.pl_true(atmost1,model5)
ans6 = logic.pl_true(atmost1,model6)
ans7 = logic.pl_true(atmost1,model7)
ans8 = logic.pl_true(atmost1,model8)

ans = [ans1, ans2, ans3, ans4, ans5, ans6, ans7, ans8]
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.
test: "ans"



